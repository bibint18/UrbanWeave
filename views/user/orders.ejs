<%-include('../../views/partials/user/header')%>
  <title>My Orders</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.css">
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- <link rel="stylesheet" href="styles.css"> -->
   <style>
    * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
}

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.breadcrumb {
  margin-bottom: 20px;
}

.breadcrumb a {
  color: #666;
  text-decoration: none;
}

.content-wrapper {
  display: flex;
  flex-wrap: wrap;
}

/* Filters section */
.filters {
  height: 30%;
  width: 25%;
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.filters h3 {
  margin-bottom: 10px;
}

.filters .filter-group h4 {
  margin-bottom: 5px;
}

.filters label {
  display: block;
  margin-bottom: 10px;
  cursor: pointer;
}

/* Orders Section */
.orders-section {
  width: 70%;
  margin-left: 5%;
}

.search-bar {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.search-bar input {
  width: 70%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.search-btn {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
  margin-left: 10px;
  border-radius: 4px;
}

.order-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.order-item {
  display: flex;
  background-color: white;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.order-item img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 8px;
  margin-right: 15px;
}

.order-details {
  flex-grow: 1;
}

.order-details h5 {
  margin-bottom: 5px;
}

.status {
  font-size: 14px;
  margin-top: 5px;
}

.status.on-the-way {
  color: #ffa500;
}

.status.delivered {
  color: green;
}

.review-link {
  color: #007bff;
  text-decoration: none;
  margin-top: 10px;
  display: inline-block;
}

.return-btn{
  background-color:green; /* Red color for cancel */
  color: white; /* White text */
  border: none; /* No border */
  padding: 6px 12px; /* Small padding */
  border-radius: 4px; /* Slightly rounded corners */
  cursor: pointer; /* Pointer on hover */
  font-size: 14px; /* Small font size */
  transition: background-color 0.3s ease; /* Smooth background transition */
}
.return-btn:hover{
  background-color: #291515;
}
.return-btn:focus {
  outline: none; /* Remove focus outline */
  box-shadow: 0 0 4px rgba(60, 231, 89, 0.7); /* Subtle shadow on focus */
}
.cancel-btn {
  background-color: #e74c3c; /* Red color for cancel */
  color: white; /* White text */
  border: none; /* No border */
  padding: 6px 12px; /* Small padding */
  border-radius: 4px; /* Slightly rounded corners */
  cursor: pointer; /* Pointer on hover */
  font-size: 14px; /* Small font size */
  transition: background-color 0.3s ease; /* Smooth background transition */
}

.cancel-btn:hover {
  background-color: #c0392b; /* Darker red on hover */
}

.cancel-btn:focus {
  outline: none; /* Remove focus outline */
  box-shadow: 0 0 4px rgba(231, 76, 60, 0.7); /* Subtle shadow on focus */
}
.buttons-area{
  display: flex;
  flex-direction: column;
  gap:3%;
  justify-content:space-around;
  
}
.retry-btn{
  background-color: rgb(129, 77, 77);
    height: 12%;
    border: none;
    border-radius: 3px;
    padding: 3px;
    color: white;
}
.invoice-btn{
  border-radius: 7px;
  height: 145;
  border:none;
  background-color:rgb(177, 177, 177) ;
}
.invoice-btn:hover{
  background-color: dimgray;
  color: white;
}
.retry-btn:hover{
  background-color:rgb(174, 50, 50);
  color:white;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .filters {
    width: 100%;
    margin-bottom: 20px;
  }

  .orders-section {
    width: 100%;
    margin-left: 0;
  }

  .search-bar input {
    width: 60%;
  }
}

@media (max-width: 576px) {
  .order-item {
    flex-direction: column;
    align-items: center;
  }

  .order-item img {
    margin-bottom: 10px;
  }

  .search-bar input {
    width: 100%;
  }

  .search-btn {
    width: 100%;
    margin-top: 10px;
  }
}

.pagination {
  display: flex;
  gap: 0.5rem;
  justify-content: center;
  padding: 1rem;
}

/* Pagination link styling */
.pagination-link {
  text-decoration: none;
  color: #333;
  padding: 0.5rem 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-weight: 500;
  transition: background-color 0.3s, color 0.3s;
}

/* Hover effect */
.pagination-link:hover {
  background-color: #007bff;
  color: #fff;
  border-color: #007bff;
}

/* Active page styling */
.pagination-link.active {
  background-color: #007bff;
  color: #fff;
  font-weight: bold;
  border-color: #007bff;
}
.SearchForm{
  display: contents;
}


  </style>
</head>
<body>
  <div class="container">
    <!-- Breadcrumb navigation -->
    <div class="breadcrumb">
      <a href="/home">Home</a> &gt; 
      <a href="/userProfile">My Account</a> &gt; 
      <span>My Orders</span>
    </div>

    <!-- Filters and Orders section -->
    <div class="content-wrapper">
      <!-- Filters -->
      <aside class="filters">
        <h3>Filters</h3>

        <!-- Order Status Filter -->
        <div class="col-sm-6 col-xs-12 short_by_area">
          <div class="short_by_inner">
            <label>Sort by:</label>
            <form id="sortForm" method="GET" action="/orders">
              <select class="sort-select" name="sort" onchange="document.getElementById('sortForm').submit()">
                <option value="">Select Sorting</option>
                <option value="Processing" <% if (sort === 'Processing') { %> selected <% } %> >Status: Processing</option>
                <option value="Shipped" <% if (sort === 'Shipped') { %> selected <% } %> >Status: Shipped</option>
                <option value="Cancelled" <% if (sort === 'Cancelled') { %> selected <% } %> >Status: Cancelled </option>
                <option value="Delivered" <% if (sort === 'Delivered') { %> selected <% } %> >Status: Delivered</option>
                <option value="Returned" <% if (sort === 'Returned') { %> selected <% } %> >Status: Returned</option>
                
              </select>
            </form>
          </div>
        </div>
      </aside>

      <!-- Orders Section -->
      <section class="orders-section">
        <!-- Search bar -->
        <div class="search-bar">
          <form action="/orders" method="GET" class="SearchForm">
          <input type="text" placeholder="Search your orders here" name="search">
          <button class="search-btn">Search Orders</button>
        </form>
        </div>

        <!-- Orders list -->
        <div class="order-list">
          <% if (orders.length > 0) { %>
            <% orders.forEach(order => { %>
              <% order.products.forEach(ProductItem => { %>  
              <!-- Order Item -->
              <div class="order-item" id="order-<%= order._id %>">
                <!-- Product Image (Show first product's image as example) -->
                <img src="/uploads/re-image/<%= ProductItem.product.productImage[0] %>" alt="Product Image">

                <div class="order-details">
                  <!-- <h5>Order ID: <%= order._id %></h5> -->
                  <!-- <p>Total Amount: ₹<%= order.totalAmount %></p> -->
                  <p>Order Date: <%= new Date(order.orderDate).toLocaleDateString() %></p>

                  <p><strong>Products:</strong></p>
                  <ul style="list-style-type: none;">
                      <li style="list-style-type: none;">
                        <%= ProductItem.product.ProductName %> - Size: <%= ProductItem.size %>, Quantity: <%= ProductItem.quantity %> 
                        - ₹<%= ProductItem.price %>
                        <P>Payment Status: <%=  order.paymentStatus %></P>
                        <P>Payment Method: <%=  order.PaymentMethod %></P>
                      </ul>
                    
                    </ol>

                  <p><span class="status <%= order.status.toLowerCase() %>">Status: <%= ProductItem.ProductStatus %></span></p>
                  <p><span >OrderID: <%= order.oid %></span></p>
                  <button class="invoice-btn"><a href="/order/<%= order._id %>/invoice" class="btn anchor-class">Download Invoice</a></button> 
                </div>
                
                <div class="buttons-area">

                  <% if (ProductItem.ProductStatus === 'Processing' || ProductItem.ProductStatus === 'Shipped') { %>
                    <button class="cancel-btn" onclick="cancelOrder('<%= order._id %>','<%=ProductItem.product._id %>')">Cancel Order</button>

                  <% } %>
                  <% if (ProductItem.ProductStatus === 'Delivered') { %>
                    <button class="return-btn " onclick="returnOrder('<%= order._id %>','<%=ProductItem.product._id%>')">Return Product</button>
                  <% } %>
                  <% if ((order.paymentStatus === 'Pending' || order.paymentStatus === 'Failed' )  && !order.products.some(product => product.ProductStatus==='Cancelled') && (order.PaymentMethod !='CASH ON DELIVERY')) { %>
                    <button class="retry-btn" onclick="retryPayment('<%= order._id %>')">Retry Payment</button>
                  <% } %>
                  
                </div>
                
              </div>
              <% }) %>
            <% }) %>
          <% } else { %>
            <p>No orders found.</p>
          <% } %>
          
        </div>
      </section>
    </div>
</div>

<div class="pagination">
  <% if (currentPage > 1) { %>
    <a href="?page=<%= currentPage - 1 %>&sort=<%= sort %>&search=<%=search%>" class="pagination-link">Previous</a>
  <% } %>
  
  <% for (let i = 1; i <= totalPages; i++) { %>
    <a href="?page=<%= i %>&sort=<%= sort %>&search=<%=search%>" class="pagination-link <%= i === currentPage ? 'active' : '' %>"><%= i %></a>
  <% } %>

  <% if (currentPage < totalPages) { %>
    <a href="?page=<%= currentPage + 1 %>&sort=<%= sort %>&search=<%=search%>" class="pagination-link">Next</a>
  <% } %>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  
async function retryPayment(orderId) {
    try {
        // Step 1: Fetch order details and create a new Razorpay order ID for retry
        const response = await fetch(`/api/payment/retry-order`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId: orderId })
        });
        
        const { orderId: newOrderId, amount, key } = await response.json();
        
        // Step 2: Configure and open Razorpay with new order ID and details
        const options = {
            key: key,
            amount: amount * 100,
            currency: "INR",
            name: "Your Company Name",
            description: "Retry Payment",
            order_id: newOrderId,
            handler: async function (response) {
                // Verify payment on success
                const verifyResponse = await fetch('/api/payment/verify-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                        orderId: orderId // Original order ID for updating
                    })
                });

                const result = await verifyResponse.json();
                if (result.success) {
                  fetch(`/payment/update/${orderId}`,{
                          method:"post",
                          headers:{
                            "Content-Type":"application/json"
                          }
                        })
                          .then(response => response.json())
                          .then((data) => {
                            if(data.success){
                              Swal.fire({
                                icon:"success",
                                title:"Payment Completed",
                                text:"Order Placed Succesfully!",
                                timer:1500,
                                showConfirmButton:false
                              })
                              .then(() => {
                                window.location.href='/orders'
                              })
                            }else{
                              Swal.fire({
                                icon:"error",
                                title:"Error",
                                text:"Cant Complete Payment",
                                timer:1500,
                                showConfirmButton:false
                              })
                            }
                          })
                          .catch((error) => {
                            console.log(error)
                            Swal.fire({
                                icon:"error",
                                title:"Error",
                                text:"Something went wrong!",
                                timer:1500,
                                showConfirmButton:false
                              })
                          })
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Verification Failed',
                        text: "Please try again."
                    });
                }
            },
            theme: { color: "#3399cc" },
            modal: {
                ondismiss: function () {
                    console.log("Retry payment was canceled by the user.");
                    alert("Retry payment was canceled.");
                }
            }
        };
        
        // Open Razorpay's checkout UI
        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        console.error("Error in retrying payment:", error);
    }
}

  function cancelOrder(orderId,ProId){
    // const ProId = ProId
    Swal.fire({
  title: 'Are you sure?',
  text: "You won't be able to revert this!",
  icon: 'warning',
  showCancelButton: true,
  confirmButtonColor: '#3085d6',
  cancelButtonColor: '#d33',
  confirmButtonText: 'Yes, delete it!'
})
.then((result) => {
  if(result.isConfirmed){

    console.log(orderId);
    fetch(`/order/cancel/${orderId}/${ProId}`,{
      method:'post',
      headers:{'Content-Type':'application/json'},
      // body:JSON.stringify({ProId:ProId})
    })
    .then(response=> response.json())
    .then((data) => {
      if(data.success){
        Swal.fire({
          icon:'success',
          title:'Order Cancelled',
          text:'Your order has been cancelled.',
          timer:1500,
          showConfirmButton:false
        })
        .then(() => {
          location.reload()
        })
        const  orderElement = document.getElementById(`order-${orderId}`)
        console.log("ele,",orderElement);
        
        if(orderElement){
          orderElement.remove();
        }
      }else{
        Swal.fire({
          icon:'error',
          title:'Error',
          text:'Failed to cancel order.',
          timer:1500,
          showConfirmButton:false
        })
      }
    })
    .catch((error) => {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'SOMETHING  WENT WRONG',
        timer: 1500,
        showConfirmButton:false
      })
    })
  }
  })
  }


  function returnOrder(OrderID,ProduId){
    Swal.fire({
      title: 'Are you sure?',
  text: "You won't be able to revert this!",
  icon: 'warning',
  showCancelButton: true,
  confirmButtonColor: '#3085d6',
  cancelButtonColor: '#d33',
  confirmButtonText: 'Yes, Return it'
    })
    .then(result => {
      if(result.isConfirmed){
        fetch(`/orders/return/${OrderID}/${ProduId}`,{
          method:'POST',
          headers:{
            'Content-Type':'application/json',
          },
        })
        .then(response => response.json())
        .then(data => {
          if(data.success){
            Swal.fire({
              icon:'success',
              title:'Product Returned',
              text:'Product returned successfully.',
              timer:1500,
              showConfirmButton:false

            })
          }else{
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text:'Error deleting the product'
            })
          }
        })
        .catch((error) => {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text:'Error deleting the product',
            timer:1500,
          })
        })
      }
    })
  }
</script>
<%-include('../../views/partials/user/footer')%>



