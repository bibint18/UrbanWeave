<%- include("../../views/partials/admin/header") %>
<title>Sales Report Dashboard</title>
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f2f5fa; /* Light background */
      margin: 0;
      padding: 0;
      color: #333;
    }
    .detailed-order {
  border: 1px solid #ddd;
  padding: 10px;
  margin-bottom: 10px;
  background-color: #f9f9f9;
}
    .dashboard-container {
      max-width: 1200px;
      margin: 40px auto;
      padding: 30px;
      background-color: #ffffff;
      border-radius: 15px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }

    .dashboard-title {
      text-align: center;
      font-size: 32px;
      margin-bottom: 30px;
      color: #2c3e50;
      font-weight: 700;
    }

    .button-group {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-bottom: 30px;
      justify-content: center;
    }

    .button, .apply-button, .export-button {
      background-color: #3498db;
      color: #fff;
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s, transform 0.2s;
      font-weight: 600;
      box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);
    }

    .button:hover, .apply-button:hover, .export-button:hover {
      background-color: #2980b9;
      transform: scale(1.03);
    }

    .button:active, .apply-button:active, .export-button:active {
      transform: scale(0.97);
    }

    select, .date-input {
      padding: 10px;
      border: 1px solid #ccd1d9;
      border-radius: 8px;
      outline: none;
      transition: border 0.3s;
      background-color: #ecf0f1;
      font-weight: 500;
      color: #2c3e50;
      cursor: pointer;
    }

    select:focus, .date-input:focus {
      border-color: #3498db;
    }

    .card-container {
      display: flex;
      gap: 20px;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    .card {
      background: linear-gradient(135deg, #ffffff, #f8f9fa);
      flex: 1;
      min-width: 260px;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
      text-align: center;
      transition: transform 0.2s;
    }

    .card:hover {
      transform: translateY(-5px);
    }

    .card h3 {
      font-size: 20px;
      color: #34495e;
    }

    .card p {
      font-size: 26px;
      color: #3498db;
      margin-top: 10px;
      font-weight: 700;
    }

    .chart-container {
      margin-top: 40px;
      padding: 30px;
      background-color: #ffffff;
      border-radius: 15px;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }

    .chart-select {
      display: block;
      margin-bottom: 20px;
      padding: 10px;
      border-radius: 8px;
      outline: none;
      border: 1px solid #ccd1d9;
      background-color: #ecf0f1;
      color: #2c3e50;
      font-weight: 500;
    }

    .export-buttons {
      display: flex;
      justify-content: flex-end;
      gap: 20px;
      margin-top: 30px;
    }

    .export-button.pdf {
      background-color: #e74c3c;
    }

    .export-button.pdf:hover {
      background-color: #c0392b;
    }

    .export-button.excel {
      background-color: #27ae60;
    }

    .export-button.excel:hover {
      background-color: #229954;
    }

    .export-button:active {
      transform: scale(0.97);
    }

    .links-container {
    display: flex;
    /* justify-content: space-between; */
    flex-direction: column;
    margin-top: 20px;
    padding: 15px;
  }

  .links-container a {
    text-decoration: none;
    font-size: 18px;
    color: #3498db;
    font-weight: 600;
    transition: color 0.3s;
  }

  .links-container a:hover {
    color: #2980b9;
  }

  .rendered-data-container {
    margin-top: 30px;
    padding: 20px;
    background-color: #f7f9fc;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
  }

  .rendered-data-container h1 {
    font-size: 24px;
    color: #34495e;
    margin-bottom: 15px;
  }

  .rendered-data-container ul {
    list-style-type: none;
    padding-left: 0;
  }

  .rendered-data-container li {
    font-size: 16px;
    padding: 8px 0;
    border-bottom: 1px solid #ddd;
  }

  .rendered-data-container li:last-child {
    border-bottom: none;
  }
  </style>
</head>
<body>
  <section class="content-main">
    <div class="content-header">
      <div class="dashboard-container">
        <h1 class="dashboard-title">Sales Report Dashboard</h1>
        <div class="button-group">
          <button class="button" onclick="fetchReport('daily')">1 Day</button>
          <button class="button" onclick="fetchReport('weekly')">1 Week</button>
          <button class="button" onclick="fetchReport('monthly')">1 Month</button>
          <button class="button" onclick="fetchReport('yearly')">1 Year</button>
          <select id="reportType" class="select" onchange="handleReportTypeChange()">
            <option value="choose">Customise Here</option>
            <!-- <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option> -->
            <option value="custom">Custom Range</option>
          </select>
          <input type="date" id="startDate" class="date-input" placeholder="Start Date" disabled>
          <input type="date" id="endDate" class="date-input" placeholder="End Date" disabled>
          <button class="apply-button" onclick="fetchCustomReport()">Apply Custom Date</button>
        </div>

        <div class="card-container">
          <div class="card">
            <h3>Total Sales</h3>
            <p id="totalRevenue">₹0.00</p>
          </div>
          <div class="card">
            <h3>Total Discounts</h3>
            <p id="totalDiscounts">₹0.00</p>
          </div>
          <div class="card">
            <h3>Coupon Deductions</h3>
            <p id="totalCouponDeductions">₹0.00</p>
          </div>
          <div class="card">
            <h3>Total Orders</h3>
            <p id="totalOrders">0</p>
          </div>
        </div>
        <div class="export-buttons">
            <button class="export-button pdf">Export PDF</button>
            <button class="export-button excel">Export Excel</button>
          </div>
          <div class="chart-container">
            <h2>Sales Chart</h2>
            <select id="chartType" class="chart-select">
              <option value="bar">Bar Chart</option>
              <option value="line">Line Chart</option>
            </select>
            <div class="button-group">
              <button class="button" onclick="fetchReport('daily')">1 Day</button>
              <button class="button" onclick="fetchReport('weekly')">1 Week</button>
              <button class="button" onclick="fetchReport('monthly')">1 Month</button>
              <button class="button" onclick="fetchReport('yearly')">1 Year</button>
              <select id="reportType" class="select" onchange="handleReportTypeChange()">
                <option value="choose">Customise Here</option>
                <!-- <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option> -->
                <option value="custom">Custom Range</option>
              </select>
              <input type="date" id="startDate" class="date-input" placeholder="Start Date" disabled>
              <input type="date" id="endDate" class="date-input" placeholder="End Date" disabled>
              <button class="apply-button" onclick="fetchCustomReport()">Apply Custom Date</button>
            </div>
            <canvas id="salesChart"></canvas>
          </div>

          <div class="detailed-orders-container" style="display: none;"></div>

          <!-- <div class="detailed-orders-container">
            <% detailedOrders.forEach((order) => { %>
              <div class="detailed-order">
                <p class="order-id"><%= order.orderId %></p>
                <p class="order-user"><%= order.user %></p>
                <p class="order-amountPaid">₹<%= order.amountPaid %></p>
                <p class="order-couponDeduction">₹<%= order.couponDeduction %></p>
                <p class="order-categoryOffer">₹<%= order.categoryOffer %></p>
                <p class="order-createdAt"><%= order.createdAt %></p>
              </div>
            <% }); %>
          </div> -->
      </div>
    </div>



    <div class="">
    <div class="links-container">
      <a href="" class="left-link" onclick="fetchData('topProduct'); return false;">Top Products</a>
      <a href="" class="right-link" onclick="fetchData('topCategory'); return false;">Top Categories</a>
    </div>

    <!-- Rendered data section -->
    <div class="rendered-data-container">
      
    
    </div>
  </div>   <!-- here-->
  </div>
</div>


   
<!-- <div class="TopProducts">
        <% if(topProducts.length>0){ %> 
      <h1>Top 10 Best Selling Products</h1>
      <% } %>
      <ul>
        <% topProducts.forEach(product => { %>
          <li>
            <%= product.productDetails.ProductName %> - Sold: <%= product.Sold %>
          </li>
        <% }); %>
      </ul>
      </div> 
      
      <div class="topCategory"> 
          <% if(topCategory.length>0) { %> 
            <h1>Top 10 Best Selling Categories</h1>
            <% } %>
            <ul>
              <% topCategory.forEach(category => { %>
                <li>
                  <%= category.categoryDetails.categoryName %> - Total Sold: <%= category.sold %>
                </li>
              <% }); %>
            </ul>
          </div> -->

  </section>
  <!-- <a href="/admin/topProduct">Top Products</a>
  <a href="/admin/topCategory">Top Categories</a>
  <h1>Top 10 Best Selling Products</h1>
<ul>
  <% topProducts.forEach(product => { %>
    <li>
      <%= product.productDetails.ProductName %> - Sold: <%= product.Sold %>
    </li>
  <% }); %>
</ul>

<h1>Top 10 Best Selling Categories</h1>
<ul>
  <% topCategory.forEach(category => { %>
    <li>
      <%= category.categoryDetails.categoryName %> - Total Sold: <%= category.sold %>
    </li>
  <% }); %>
</ul> -->

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.16/jspdf.plugin.autotable.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>

  <script>
    // Ensure the script runs after the DOM is fully loaded
window.addEventListener('DOMContentLoaded', (event) => {
  // Fetch report for the past year on initial page load
  fetchReport('yearly');
});

    // let salesChart = null
    function fetchData(type) {
  fetch(`/admin/${type}`)  // Sends the request to the corresponding route
    .then(response => response.json())  // Parse the response as JSON
    .then(data => {
      let html = '';
console.log(data)
console.log(type)
      if (type === 'topProduct') {
        console.log('insid type product')
        if (data.topProducts.length > 0) {
          html += '<h1>Top Selling Products</h1><ul>';
          data.topProducts.forEach(product => {
            html += `<li>${product.productDetails.ProductName} - Sold: ${product.Sold}</li>`;
          });
          html += '</ul>';
        } else {
          html = '<p>No products found.</p>';
        }
      } else if (type === 'topCategory') {
        console.log("inside type category")
        if (data.topCategory.length > 0) {
          html += '<h1>Top Selling Categories</h1><ul>';
          data.topCategory.forEach(category => {
            html += `<li>${category.categoryDetails.categoryName} - Total Sold: ${category.sold}</li>`;
          });
          html += '</ul>';
        } else {
          html = '<p>No categories found.</p>';
        }
      }

      // Replace the content in the rendered-data-container
      document.querySelector('.rendered-data-container').innerHTML = html;
    })
    .catch(error => {
      console.error('Error fetching data:', error);
      document.querySelector('.rendered-data-container').innerHTML = '<p>Error loading data.</p>';
    });
}


document.getElementById('chartType').addEventListener('change',function(){
  const chartType = this.value;
  if(window.salesChart){
    window.salesChart.config.type = chartType
    window.salesChart.update()
  }
})
  
    async function fetchReport(type) {
        
      try {
        const response = await fetch(`/admin/sales-report?type=${type}`);
        const data = await response.json();
        console.log("data: ",data)
        if (data.success) {
          document.getElementById('totalRevenue').textContent = `₹${data.report.totalRevenue.toFixed(2)}`;
          document.getElementById('totalDiscounts').textContent = `₹${data.report.totalDiscounts.toFixed(2)}`;
          document.getElementById('totalCouponDeductions').textContent = `₹${data.report.totalCouponDeductions.toFixed(2)}`;
          document.getElementById('totalOrders').textContent = data.report.totalOrders;

          const detailedOrdersContainer = document.querySelector('.detailed-orders-container');
      detailedOrdersContainer.innerHTML = ''; // Clear previous content

      data.detailedOrders.forEach((order) => {
        const orderDiv = document.createElement('div');
        orderDiv.classList.add('detailed-order');

        orderDiv.innerHTML = `
          <p class="order-id"> ${order.orderId}</p>
          <p class="order-user"> ${order.user}</p>
          <p class="order-amountPaid"> ₹${order.amountPaid}</p>
          <p class="order-couponDeduction"> ₹${order.couponDeduction}</p>
          <p class="order-categoryOffer">₹${order.categoryOffer}</p>
          <p class="order-createdAt">${new Date(order.createdAt).toLocaleDateString()}</p>
        `;

        detailedOrdersContainer.appendChild(orderDiv);
      });
          updateSalesChart(data.report.salesData);
        } else {
          alert('Failed to load sales report');
        }
      } catch (error) {
        console.error('Error fetching sales report:', error);
      }
    }

    function handleReportTypeChange() {
        console.log("inside: ")
      const reportType = document.getElementById('reportType').value;
      console.log(reportType)
      const startDateInput = document.getElementById('startDate');
      const endDateInput = document.getElementById('endDate');

      if (reportType === 'custom') {
        startDateInput.disabled = false;
        endDateInput.disabled = false;
      } else {
        startDateInput.disabled = true;
        endDateInput.disabled = true;
      }
    }

    async function fetchCustomReport() {
      const startDate = document.getElementById('startDate').value;
      console.log(startDate)
      const endDate = document.getElementById('endDate').value;
      console.log(endDate)
      if (!startDate || !endDate) {
        alert('Please select both start and end dates');
        return;
      }
      try {
        const response = await fetch(`/admin/sales-report?type=custom&startDate=${startDate}&endDate=${endDate}`);
        const data = await response.json();
        if (data.success) {
          console.log("cusromehe",data.detailedOrders)
          document.getElementById('totalRevenue').textContent = `₹${data.report.totalRevenue.toFixed(2)}`;
          document.getElementById('totalDiscounts').textContent = `₹${data.report.totalDiscounts.toFixed(2)}`;
          document.getElementById('totalCouponDeductions').textContent = `₹${data.report.totalCouponDeductions.toFixed(2)}`;
          document.getElementById('totalOrders').textContent = data.report.totalOrders;
          const detailedOrdersContainer = document.querySelector('.detailed-orders-container');
      detailedOrdersContainer.innerHTML = ''; // Clear previous content

      data.detailedOrders.forEach((order) => {
        const orderDiv = document.createElement('div');
        orderDiv.classList.add('detailed-order');

        orderDiv.innerHTML = `
          <p class="order-id"> ${order.orderId}</p>
          <p class="order-user"> ${order.user}</p>
          <p class="order-amountPaid"> ₹${order.amountPaid}</p>
          <p class="order-couponDeduction"> ₹${order.couponDeduction}</p>
          <p class="order-categoryOffer">₹${order.categoryOffer}</p>
          <p class="order-createdAt">${new Date(order.createdAt).toLocaleDateString()}</p>
        `;

        detailedOrdersContainer.appendChild(orderDiv);
      });
          // Update the chart with the new data
          updateSalesChart(data.report.salesData);
        } else {
          alert('Failed to load custom report');
        }
      } catch (error) {
        console.error('Error fetching custom report:', error);
      }
    }

    function updateSalesChart(salesData) {
        console.log("updte: ",salesData)
  const ctx = document.getElementById('salesChart').getContext('2d');
  const chartType = document.getElementById('chartType').value;
  console.log("chartType: ",chartType)
  console.log('Current salesChart instance:', window.salesChart);
  if (window.salesChart && !(window.salesChart instanceof Chart)) {
        console.warn('salesChart is not a Chart.js instance. Resetting.');
        window.salesChart = null;
    }
    if (window.salesChart && typeof window.salesChart.destroy === 'function') {
        window.salesChart.destroy();
    }
  window.salesChart = new Chart(ctx, {
    type: chartType,  
    data: {
      labels: salesData.labels,  
      datasets: [
        {
        label: 'Sales Amount',
        data: salesData.sales,  
        backgroundColor: chartType === 'bar' ? 'rgba(75, 192, 192, 0.2)' : 'transparent',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      },
      {
          label: 'Coupon Deductions',
          data: salesData.couponDeductions,  
          backgroundColor: chartType === 'bar' ? 'rgba(255, 99, 132, 0.2)' : 'transparent',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1
        },
        {
          label: 'Offer Amounts',
          data: salesData.offerAmounts,  
          backgroundColor: chartType === 'bar' ? 'rgba(235, 235, 0, 0.2)' : 'transparent',
          borderColor: 'rgba(235, 0, 0, 1)',
          borderWidth: 1
        }
    ]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
  
}

function exportPDF() {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  doc.setFontSize(18);
  doc.setFont("helvetica", "normal");
  doc.text('Sales Report', 14, 20);
  doc.setFontSize(12);
  doc.text(`Total Revenue: ${document.getElementById('totalRevenue').textContent.trim().replace(/₹/g, '')}`, 14, 40)
  console.log(document.getElementById('totalRevenue').textContent.trim())
  doc.text(`Total Discounts: ${document.getElementById('totalDiscounts').textContent.trim().replace(/₹/g, '')}`, 14, 50)
  doc.text(`Coupon Deductions: ${document.getElementById('totalCouponDeductions').textContent.trim().replace(/₹/g, '')}`, 14, 60)
  doc.text(`Total Orders: ${document.getElementById('totalOrders').textContent.trim()}`, 14, 70)

  // Prepare table data
  const tableData = [];
  const detailedOrders = document.querySelectorAll('.detailed-order');

  detailedOrders.forEach((order, index) => {
    const orderId = order.querySelector('.order-id').textContent;
    const user = order.querySelector('.order-user').textContent;
    const amountPaid = order.querySelector('.order-amountPaid').textContent.trim().replace(/₹/g, '');
    const couponDeduction = order.querySelector('.order-couponDeduction').textContent.trim().replace(/₹/g, '');
    const categoryOffer = order.querySelector('.order-categoryOffer').textContent.trim().replace(/₹/g, '');
    const createdAt = order.querySelector('.order-createdAt').textContent;
    tableData.push([
      index + 1,
      orderId,
      user,
      `${amountPaid}`,
      `${couponDeduction}`,
      `${categoryOffer}`,
      createdAt,
    ]);
  });
  doc.autoTable({
    startY: 80, // Adjusts the position of the table
    head: [['#', 'Order ID', 'User', 'Amount Paid', 'Coupon Deduction', 'Category Offer', 'Created At']],
    body: tableData,
    theme: 'grid', // Optional: use 'striped', 'grid', or 'plain'
    styles: {
      fontSize: 10,
      cellPadding: 3,
    },
    headStyles: {
      fillColor: [220, 220, 220], // Light gray header color
    },
  });
  doc.save('sales_report.pdf');
}


document.querySelector('.export-button.pdf').addEventListener('click', exportPDF);

function exportExcel() {
  const data = [
    ['Metric', 'Value'],
    ['Total Revenue', document.getElementById('totalRevenue').textContent],
    ['Total Discounts', document.getElementById('totalDiscounts').textContent],
    ['Coupon Deductions', document.getElementById('totalCouponDeductions').textContent],
    ['Total Orders', document.getElementById('totalOrders').textContent]
  ];
  const detailedOrdersHeading = ['Order ID', 'User', 'Amount Paid', 'Coupon Deduction', 'Category Offer', 'Created At'];
  data.push([]);  // Add a blank row for spacing
  data.push(detailedOrdersHeading);
  const detailedOrders = document.querySelectorAll('.detailed-order');
  console.log("detailedOrders: ",detailedOrders)
  detailedOrders.forEach(order => {
    const orderId = order.querySelector('.order-id').textContent;
    const user = order.querySelector('.order-user').textContent;
    const amountPaid = order.querySelector('.order-amountPaid').textContent;
    const couponDeduction = order.querySelector('.order-couponDeduction').textContent;
    const categoryOffer = order.querySelector('.order-categoryOffer').textContent;
    const createdAt = order.querySelector('.order-createdAt').textContent;
    data.push([orderId, user, amountPaid, couponDeduction, categoryOffer, createdAt]);
  });
  const worksheet = XLSX.utils.aoa_to_sheet(data);
  
  // Define column widths (measured in characters)
  worksheet['!cols'] = [
    { wch: 20 },  // Width for 'Metric' / 'Order ID'
    { wch: 30 },  // Width for 'Value' / 'User'
    { wch: 15 },  // Width for 'Amount Paid'
    { wch: 20 },  // Width for 'Coupon Deduction'
    { wch: 25 },  // Width for 'Category Offer'
    { wch: 25 }   // Width for 'Created At'
  ];
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Sales Report');
  XLSX.writeFile(workbook, 'sales_report.xlsx');
}

// Add this function call to your "Export Excel" button's click event.
document.querySelector('.export-button.excel').addEventListener('click', exportExcel);
  </script>
<%- include("../../views/partials/admin/footer") %>

